{
    "type": "WizardScriptElement",
    "config": {
        "script": "        \n        \n        \n        var div = new Element('div',{\"class\":\"polygon-overlay-menu\"});\n          \n            \n            <?php \n                GetPlugin('Maps');\n                $layers=array_values(array_filter(MapController::GetAllLayers(), function($l){return $l->getId()>=25;}));\n                $polyconfig=GetWidget('polygon-config');\n            ?>\n            \n            var layersMeta=<?php echo json_encode(array_map(function($l){ return $l->getMetadata(); }, $layers)); ?>;\n            var names=<?php echo json_encode(array_map(function($l){ return $l->getId().' - '.$l->getName(); }, $layers)); ?>;\n            var icons=<?php echo json_encode(array_map(function($l) use($polyconfig){ \n                \n                $icon= $l->getIcon(); \n                $icon='components\/com_geolive\/users_files\/user_files_680\/Uploads\/[G]_jq3_[ImAgE]_1VS_oJg.png';\n                \n                $configicon=$polyconfig->getParameter('layer-'.$l->getId());\n                if(!empty($configicon)){\n                    $icon=$configicon[0];\n                }\n                return $icon;\n                \n            }, $layers)); ?>;\n            \n            var iconSelection = new UIIconizedSelectionControl(div, {\n              allowMultipleSelection: true,\n              allowEmptySelection: true,\n              icons: icons\n              \n            });\n            \n            var layersColors=<?php echo json_encode(array_map(function($l)use($polyconfig){ \n                \n                $configcolor=$polyconfig->getParameter('layer-'.$l->getId().'-color');\n                if(!empty($configcolor)){\n                    $parts=explode(',', $configcolor);\n                    $rgb=array_map(function($str){\n                        return intval(preg_replace(\"\/[^0-9]\/\", \"\", $str));\n                    }, $parts);\n                    return $rgb;\n                }\n                \n                return \"default\";\n                \n            }, $layers)); ?>;\n            \n            iconSelection.addEvent('loadIcon', function(icon, i, asset) {\n              asset.parentNode.setAttribute('data-label',names[i].capitalize());\n              asset.parentNode.addClass('layer'+layersMeta[i].id);\n              \n              \n            }); \n            \n   \n            iconSelection.addEvent('selectionChanged', function(selection) {\n\n                \/\/hide show layers\n                window.overlayLayers.forEach(function(l,i){\n                    l.hide();\n                });\n                selection.forEach(function(s,i){\n                    window.overlayLayers[s[1]].show();\n                });\n            \n            });\n\n            \n            \n\nvar OverlayLayer = (function() {\n\n\tif(!window.GeoliveLayer){\n\t\tif(window.console&&console.warn){\n\t\t\tconsole.warn('GeoliveLayer is not defined');\n\t\t}\n\t\treturn null;\n\t}\n\n\treturn new Class({\n\t\tExtends: GeoliveLayer\n\t});\n\n\n\n})()\n\n\nif(!window.overlayLayers){\n    window.overlayLayers=layersMeta.map(function(meta){\n        return new OverlayLayer(application, Object.append(meta,{initialVisibility:\"later\"}));\n    });\n}\n\n\n\n            \n            \n            return div;",
        "identifier": "customScriptElement"
    }
}